<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rwd | Always On]]></title>
  <link href="http://HelloWurld.heroku.com/blog/categories/rwd/atom.xml" rel="self"/>
  <link href="http://HelloWurld.heroku.com/"/>
  <updated>2014-04-29T19:06:53-04:00</updated>
  <id>http://HelloWurld.heroku.com/</id>
  <author>
    <name><![CDATA[J.Reading]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Another image proposal for responsive design]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/05/15/another-image-proposal-for-responsive-design/"/>
    <updated>2012-05-15T10:17:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/05/15/another-image-proposal-for-responsive-design</id>
    <content type="html"><![CDATA[<p>There are a few ideas floating around now to deal with images and media queries. There are
all <a href="http://www.w3.org/community/respimg/2012/05/13/an-alternative-proposition-to-and-srcset-with-wider-scope/">mostly</a> <a href="https://github.com/Wilto/respimg">inefficient</a> <a href="https://gist.github.com/2701939">ideas</a>, so I'm throwing my hat in the ring.</p>

<!-- more -->


<p>The <code>picture</code> element solution adds too much markup. The whatwg proposal is just ugly as heck and doesn't leverage any existing valid attributes. The meta tag/mediaquery technique seems close, but I think that can be improved.</p>

<p>Let look at the <code>link</code> element:</p>

<p>{% codeblock lang:html %}
<link
    rel="stylesheet"
    href="smartphone.css"
    media="screen and (max-device-width: 480px)">
{% endcodeblock %}</p>

<p>What about other valid attributes we can add to that:</p>

<p>{% codeblock lang:html %}
<link
    rel="media"
    media="screen and (max-device-width: 480px)"
    type="low">
{% endcodeblock %}</p>

<p>The attribute <code>rel</code> associates a relationship to that mediaquery and is valid. <code>media</code> is a new value.</p>

<p>the <code>type</code> attribute is also valid, but the value is not implemented.</p>

<p>This can be used in <code>img</code> elements as such:</p>

<p>{% codeblock lang:html %}
<img src="myimage.jpg" lowsrc="myimage-phone.jpg">
{% endcodeblock %}</p>

<p><code>lowsrc</code>, remember that? Why not <code>highsrc</code> or <code>tabletsrc</code> or <code>tvsrc</code>? It would be up to browsers to only pull the correct src based on the alternate link. Browsers look for hooks for alternate now. This also has the benefit or not dealing with paths, unless you need to.</p>

<p>{% codeblock lang:html %}
<img src="myimage.jpg" lowsrc="" tvsrc="tvimage.jpg" highsrc="http://cdn.bigimages.org/myimage.jpg">
{% endcodeblock %}</p>

<p>With a path in the href attribute, maybe we can do this:</p>

<p>{% codeblock lang:html %}
<link
    rel="media"
    href="http://HelloWurld.heroku.com/phone-images/"
    media="screen and (max-device-width: 480px)"
    type="low">
<img src="myimage.jpg" lowsrc="myimage.jpg"> // <code>lowsrc</code> resolves to '/phone-images/myimage.jpg'
{% endcodeblock %}</p>

<p>I believe that this method gives the greatest control, smallest footprint, provides backward compatibillity and the smoothest path to adoption of any techniques that have made the rounds lately. The picture element is just too much verbosity and I can't imagine what a page with 20 images would look like. The srcset syntax is a joke and not leveraging media queries at all. Thoughts?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of Optimizing JavaScript for Responsive Design]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/04/25/the-importance-of-optimizing-javascript-for-responsive-design/"/>
    <updated>2012-04-25T13:17:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/04/25/the-importance-of-optimizing-javascript-for-responsive-design</id>
    <content type="html"><![CDATA[<p>So many responsive design solutions involve client-side detection, polyfills, data-attrs and event remapping. This all works fine, but as more and more sites begin to move toward a responsive design the importance of JavaScript optimization is more relevant than ever. More often than not, implementing a responsive design means more JavaScript and more logic. The Kb size debate for responsive sites is important, but often overlooked is the computational impact.</p>

<p>I’m not a micro-optimization troll (there’s plenty of that out there), but it’s shocking how some devices perform with the simple things we all take for granted. I would argue that for most devices, processing and latency are more important than Kb size.</p>

<p>So let’s take a look…</p>

<!-- more -->


<p>One of my favorite talks from JsConf 2012 was <a href="https://twitter.com/#!/jdalton">JDalton’s</a> “The Hidden Cost of Javascript Natives.” While admitting that some stuff was getting into unnecessary micro-optimization, he showed tests that  were quite interesting.</p>

<p>I thought I would look at some of these things from a mobile/RWD perspective. It’s important to remember that I’m not really looking at how the tests perform against each other, but how the devices perform against Chrome, Firefox and Safari. Often, there’s not going to be an appreciable difference for most things, but these tests illustrate that Mobile Safari isn’t going to process js as fast as Chrome 18 (no kidding, right).</p>

<h2><a href="http://jsperf.com/touch-events-exists">For..In loops</a> </h2>

<p>These are often called out as being hogs (the “for” loop still kills everything else), but they are necessary for doing capabilities tests.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/da63f2fc-d53c-4d27-96e9-285212f0adcb/00000065.png" alt="Alt text" /></p>

<p>It’s amazing how poorly some devices perform. I’m not saying that Modernzr is going to kill your Android 2.0 phone, but these things add up.</p>

<h2><a href="http://jsperf.com/jquery-data-vs-html-data-reading/3">Data Attributes</a></h2>

<p>The staple of any responsive images implementation performs horribly. Interesting that only the Safaris prefer the native dataset implementation.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/73c69e5f-6184-4ee6-ba25-0d8449b8fda5/00000064.png" alt="Alt text" /></p>

<p><a href="http://jsperf.com/data-vs-attr-data/4">Here’s another look at it</a>.</p>

<h2><a href="http://jsperf.com/prepend-append">jQuery Prepend/Append</a></h2>

<p>Optimization zealots' favorite pariah (<a href="http://jsperf.com/jquery-vs-native-appendchild">and rightfully so</a>), this is a biggie on mobile.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/509a5f42-73b7-4d48-a213-ebc33a712c63/00000066.png" alt="Alt text" /></p>

<p>2000 ops/sec is ghastly, but how many items are you appending really? In a client-side MVC, it could get into the hundreds. It's all cumulative after all...</p>

<h2><a href="http://jsperf.com/optimising-dom-access">DOM access</a></h2>

<p>Going to the DOM is always expensive and on mobile, it’s going to cost an arm and a leg.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/9409fc16-7f32-4f7c-ad10-33fa637703b2/00000067.png" alt="Alt text" /></p>

<p>This is a good example of optimizing code in general for performance.</p>

<h2>Chrome Timeline Panel</h2>

<p>A great <a href="http://gent.ilcore.com/2012/04/optimizing-with-timeline-panel.html">post</a> on debugging optimizations popped up recently and it’s definitely something to do on your sites now. Just know that whatever you see there in Chrome is probably amplified by a hundred on mobile devices.</p>

<h2>Conclusion</h2>

<p>Optimizing for performance is important regardless of the final client’s processing power, but it’s so much more important for a responsive design site. Piling on more and more JavaScript seems misguided and we should keep that in mind when trying to future-proof sites. I’d love to see how these tests stack up on other devices, so if you have web access on your toaster; please run them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Modules]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/04/19/responsive-modules/"/>
    <updated>2012-04-19T09:25:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/04/19/responsive-modules</id>
    <content type="html"><![CDATA[<p><strong>Update</strong>: Refactored to remove namespacing.</p>

<p>A lot has been said about Responsive Design lately. It’s primary a design movement, but the real problem it tries to solve is making content “<a href="http://www.slideshare.net/yiibu/reset-the-web">flow like water</a>.” To me it’s not about media queries, or 100% image widths, it’s about: one url, one codebase, and future-proofing new capabilities to maximize user experience.</p>

<p>Therefore, I give you: <strong>Responsive Modules</strong>.</p>

<!-- more -->


<p>Ok, I’m not reinventing anything; it’s just a way to leverage JavaScript’s prototypal inheritance, and future proof functionality through AMD dependency management.</p>

<p><strong>Backstory</strong>: I liked Classes in JavaScript before it was <a href="http://prototypejs.org/learn/class-inheritance">cool</a> (wait, was that ever cool?). I’m bummed to see them <a href="http://brendaneich.com/2011/10/jsconf-eu/">facing headwinds</a> in ES6. They aren’t totally necessary in JS, but it’s nice to have a super() and init() built in to your modules. <a href="http://www.dustindiaz.com/klass">There</a> <a href="http://jsclass.jcoglan.com/">are</a> <a href="http://coffeescript.org/#classes">many</a> <a href="http://ejohn.org/blog/simple-javascript-inheritance/">options</a>. My personal favorite is John Resig’s, since it’s the easiest sell ("hey, that jQuery guy made it!"). There's a github of this setup <a href="https://github.com/jreading/JsModuleBoilerplate">here</a> minus the responsive bit.</p>

<h2>Enough chatter, the code...</h2>

<p>Here's a carousel widget written in jQuery:</p>

<p>{% codeblock carousel.js lang:js %}
define([Class],function(Class) {
    var Carousel = Class.extend({
        options: {
            //options here
        },
        init: function() {
            this._super(opts, element);
            //instance vars live here
            this.intPos;
            this.attachEvents();
        },
        attachEvents: function() {
            $('.arrow-next',this.element).on('click',$.proxy(function(){
                this.scrollNext();
            },this));</p>

<pre><code>        $('.arrow-prev',this.element).on('click',$.proxy(function(){
            this.scrollPrev();
        },this));
    },
    scrollNext: function() {
        // calculate the intPos to move next here
        this.element.css({'left': this.intPos}); //css3 animation
    },
    scrollPrev: function () {
        //calculate the intPos to move previous here
        this.element.css({'left': this.intPos});
    }
});

return Carousel;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Ok, so we have a little module that extends class, inits, bind itself to the 'this.element' data, attaches click events to arrows and scrolls the container. Cool...</p>

<p>But what about touch devices? We don't even have the arrows on the mobile layout. We want an invisible gesture, like a swipe.</p>

<p>So, we write another module for touch devices that includes the same methods for scrolling, but has a different 'attachEvents' method. But now we aren't being <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>. Or we can just add another method for swipe and conditionally call that, but now it's getting crufty...</p>

<p>AMD gives us a better way:</p>

<p>{% codeblock carousel.touch.js lang:js %}
define(['carousel'],function(Carousel) {
    var Carousel = Carousel.extend({
        attachEvents: function() {
            this.element.on('touchstart',$.proxy(function(e){
                this.startPos = e.originalEvent.touches[0].pageX;
            },this)); <br/>
            this.element.on('touchmove',$.proxy(functione(e){
                this.endPos = e.originalEvent.changedTouches[0].pageX;</p>

<pre><code>            if (this.startPos &lt; this.endPos) {
                this.scrollPrev();
            } else {
                this.scrollNext();
            }
        },this));
    },
});

return Carousel;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Now we are only replacing the parts we need, staying DRY, and leveraging the prototype chain. This makes more sense when there are more shared methods, but you get the gist.</p>

<h2>How's this work?</h2>

<p>AMD allows for dependency management. The touch version of the script is dependent on the base carousel file and extends itself. Because we aren't including the _super method in there, it's overriding the entire method, giving us a version with touch events.
Now it's just a matter of adding the right script for each device (this is where R+/RESS fits nicely).</p>

<p>One way to load this on the client would be:</p>

<p>{% codeblock head lang:js  %}
Modernizr.load({
    test: Modernizr.touch,
    yep: 'carousel.touch.js',
    nope: 'carousel.js'
});
{% endcodeblock  %}</p>

<h2>Ways to improve</h2>

<p>We could leave the 'attachEvents' method empty and have versions for each capability (carousel.touch.js, carousel.click.js, carousel.speech.js) that way if we had client-side dependency management happening (via require.js or curl.js for example, though <a href="http://alexsexton.com/blog/2012/03/my-thoughts-on-amd/">I hear that's bad</a>) we wouldn't be carrying dead code around. We could also flip it around and have the touch events the default and make a carousel.click.js.</p>

<p>A better way would be to do AMD preprocessing and concatenate them all together (bonus points if your build script replaces the methods instead of just bundling the dependencies).</p>

<p>Regardless of execution, we are keeping the tenets of responsive design intact: keeping a common codebase, common url and future-proofing emerging capabilites without relying on loading more libraries or polyfills, or constraining the design.</p>
]]></content>
  </entry>
  
</feed>
