<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rest | Always On]]></title>
  <link href="http://HelloWurld.heroku.com/blog/categories/rest/atom.xml" rel="self"/>
  <link href="http://HelloWurld.heroku.com/"/>
  <updated>2014-04-29T18:31:35-04:00</updated>
  <id>http://HelloWurld.heroku.com/</id>
  <author>
    <name><![CDATA[J.Reading]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Angular $resource]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2014/04/29/on-angular/"/>
    <updated>2014-04-29T17:12:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2014/04/29/on-angular</id>
    <content type="html"><![CDATA[<p>It is said that your services should always be heavier than your controllers. That's a generally a good architectural metric, but not at the expense of simplicity; particularily for REST services.</p>

<p>Here's a super simple approach in Angular that I've found that keeps some cruft from your controllers.</p>

<!-- more -->


<p>There's alot of FUD about angular providers, services, and factories <a href="http://codeofrob.com/entries/you-have-ruined-javascript.html">(see this)</a>, but the reality is that Angular $resource is super convienent for REST services <a href="http://www.bennadel.com/blog/2433-using-restful-controllers-in-an-angularjs-resource.htm">(here's a good review)</a>. It seems to lack some heft at times and my REST services do often look as skinny as a Williamsburg hipster. This leads people to use the more raw $http service and write a ton of code. There's a niftier way.</p>

<p>Often you will need to massage data in and massage data out to get the it match your model-view. Remember the single greatest thing about Angular is the MVVM, two-way binding. It's too much to ask of your REST model to match completely with your view, so you need to tweak it first.</p>

<p>Thankfully, angular gives us <code>transformRequest</code> and <code>transformResponse</code>.</p>

<pre><code class="javascript services.js">app.factory('ThatThing', function($resource) {
    return $resource('/REST/ThatThing/:id', {
        id: '@id'
    },
    {
        get: {
            method: 'GET',
            transformResponse: function(data) {
                var newData = {'sup': 'playa', 'data': angular.fromJson(data)};
                return newData;
            }
        }
    });
});
</code></pre>

<pre><code class="javascript controllers.js">ThatThing.get(function(data){
    console.log(data);  // {'sup':'playa', 'data': {...}}
});
</code></pre>

<p>You can munge the day away in that transformResponse function and pass it back to your view.</p>

<p>POSTS and PUTS can tweak data as well:</p>

<pre><code class="javascript services.js">app.factory('ThatThing', function($resource) {
    return $resource('/REST/ThatThing/:id', {
        id: '@id'
    },
    {
        get: {
            method: 'GET',
            transformResponse: function(data) {
                var newData = {'sup': 'playa', 'data': angular.fromJson(data)};
                return newData;
            }
        },
        update: {
            method: 'PUT',
            transformRequest: function(data, headers) {
                var newData = {'hey': 'girl', 'data': data};
                return angular.toJson(newData);
            }
        }
    });
});
</code></pre>

<pre><code class="javascript controllers.js">ThatThing.update({id:5},{'foo':'bar'},function(data){ 
    // Request Payload: {"hey":"girl","data":{"foo":"bar"}}
});
</code></pre>

<p>Now, you can get crazy in your services and let your controllers do what they are supposed to: <em>very little</em>.</p>
]]></content>
  </entry>
  
</feed>
