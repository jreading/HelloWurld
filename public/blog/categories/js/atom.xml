<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: js | Always On]]></title>
  <link href="http://HelloWurld.heroku.com/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://HelloWurld.heroku.com/"/>
  <updated>2013-06-17T21:42:41-04:00</updated>
  <id>http://HelloWurld.heroku.com/</id>
  <author>
    <name><![CDATA[J.Reading]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Carousel of Progress]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2013/06/17/the-carousel-of-progress/"/>
    <updated>2013-06-17T16:29:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2013/06/17/the-carousel-of-progress</id>
    <content type="html"><![CDATA[<p>There's so much to being a front-end web developer these days that some stuff is often overlooked. Calling yourself an expert says alot, a whole lot. Guess what? You're probably not one, but that doesn't matter anyway... Progress marches on and if you're paying attention, you're in for a good ride.</p>

<!-- more -->


<p>I find myself going back to <a href="http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/">this blog post by Rebebcca Murphey</a> whenever the discussion comes up of hiring and the entry-level requirements for a UI engineer. It's hard to argue with any of those points, but when I ask myself what constitutes an expert; it's a much harder thing to quantify.</p>

<p>The modern web is growing by leaps and bounds lately and it's hard to keep up some times, so here's a list of some things that are on the horizon or in the mainstream that were essentially nonexistent a few months  (or weeks) ago.</p>

<h2>HTML/Web APIs</h2>

<ul>
<li>Shadow DOM</li>
</ul>


<p>Are you ready to start churning out web components? Are you psyched to see the imminent demise of the iframe? <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">Cool, me too</a>.</p>

<ul>
<li>AppCache</li>
</ul>


<p>The douchebag is alive and well. <a href="http://blip.tv/jsconf/jsconf2012-jake-archibald-appcache-douchebag-6143723">Better get up to speed in all it's quirks</a>.</p>

<ul>
<li>Web Storage</li>
</ul>


<p>The days of the legacy Netscape "magic cookie" are behind us. <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/DOM/Storage">Hurray</a>!</p>

<ul>
<li>WebRTC</li>
</ul>


<p>So, so many cool things are going to come of webRTC. Realtime communication is going to be ubiquitious. <a href="https://webrtc-experiment.appspot.com/">Check out all these demos</a>.</p>

<ul>
<li>WebGL</li>
</ul>


<p>It's 2013, I shouldn't have to hear "Flash could do that 10 years ago." Thanks <a href="http://learningwebgl.com/blog/">WebGL</a>!</p>

<ul>
<li>Canvas</li>
</ul>


<p><a href="http://css-tricks.com/learn-canvas-snake-game/">Canvas</a> is one of the technologies that can build a career. My advice is to learn more than just canvas.</p>

<ul>
<li>Semantics</li>
</ul>


<p>Still waiting for a set of hard standards in terms of semantics. Doesn't mean this is extremely important to SEO, internationalization and plain, ole' good form. This is one of those "strong opinions weakly held" moments.</p>

<ul>
<li>Sockets</li>
</ul>


<p>Sockets are becoming indespensible. Yeah, flash "could do it years ago," but browsers <a href="http://www.html5rocks.com/en/tutorials/websockets/basics/">can do it today</a>.</p>

<ul>
<li>Proximity API</li>
</ul>


<p>Damn, FireFox is really doing some cool stuff lately. Here's in glimpse into the future: the <a href="https://hacks.mozilla.org/2013/06/the-proximity-api/">proximity API</a>.</p>

<h2>JS</h2>

<ul>
<li>Libraries: Backbone, Angular, et al.</li>
</ul>


<p>You've clearly been under a rock if you don't have one of these under your belt. MV* is a narrow use case on the front-end, but gaining more and more ground (Angular looks to unseat Backbone recently). Take a look at <a href="http://www.polymer-project.org/">Google's Polymer</a> (which is built on web components).</p>

<ul>
<li>Modules, Require.js</li>
</ul>


<p>Climb out from under there and get on board. <a href="http://corner.squareup.com/2013/02/es6-module-transpiler.html">Js Modules</a> look to be native in ES6.</p>

<ul>
<li>Promises</li>
</ul>


<p>Again, this is something that will be <a href="http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/">native someday</a> and in jQuery for ages. <a href="http://promises-aplus.github.io/promises-spec/">Here's the standard</a>. <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=H8Q83DPZy6E#t=30s">Promises, promises</a>.</p>

<ul>
<li>Strict Mode</li>
</ul>


<p><a href="http://scriptogr.am/micmath/post/should-you-use-strict-in-your-production-javascript">Get used to it</a>. It's going to be a requirement soon enough.</p>

<ul>
<li>Testing</li>
</ul>


<p>Testing is the new normal. <a href="http://alistapart.com/article/writing-testable-javascript">Another great post by Ms. Murphey</a>.</p>

<ul>
<li>Node/NPM</li>
</ul>


<p>If I was writing a similar article for backend developers this would be at the top of the list. But for the front-end, it's just not cool to say you can't use the terminal, run <code>npm install</code> and push to a cloud-based repository or production server. <a href="http://net.tutsplus.com/tutorials/javascript-ajax/node-js-for-beginners/">Learn node</a> and don't be a hater. It's just not acceptable and so, so <a href="http://www.youtube.com/watch?v=1e1zzna-dNw">NOT cool</a>.</p>

<ul>
<li>Patterns</li>
</ul>


<p>Everyone agrees on the best pattern, so I almost didn't include this very <a href="http://shichuan.github.io/javascript-patterns/">thorough list of popular javascript patterns</a>. There's hardly any dissent on the best way to code. ;P In seriousness, the <a href="http://cujojs.com/">AOP pattern</a> presented in cujo.js looks great.</p>

<ul>
<li>ES6/7</li>
</ul>


<p><a href="http://tc39wiki.calculist.org/es6/">So much hard work</a> goes into the TC39 committee, if you ever see a member, give them a hug. Brendan Eich mentions es7 at jsConf recently... Wha?? Also, an <a href="http://kangax.github.io/es5-compat-table/es6/">awesome chart</a>.</p>

<h2>CSS</h2>

<ul>
<li>Painting Optimization</li>
</ul>


<p>Painting Optimization is the new <code>for</code> loop optimization. <a href="https://developers.google.com/events/io/sessions/325933151">Pay attention</a>.</p>

<ul>
<li>Scoped stylesheets</li>
</ul>


<p>Another thing to come out of chromium. <a href="http://updates.html5rocks.com/2012/03/A-New-Experimental-Feature-style-scoped">Take a look and learn</a>.</p>

<ul>
<li>Preprocessors</li>
</ul>


<p>Sass, Stylus, Rework.  LESS couldn't survive its tortured past. Regardless, <a href="http://blog.teamtreehouse.com/how-to-choose-the-right-css-preprocessor">they're here to stay</a>.</p>

<ul>
<li>Flexible box model</li>
</ul>


<p>Finally a solution to the float vs. inline-block problem. And the 100% height problem. And so many other ancient layout issues. <a href="http://coding.smashingmagazine.com/2011/09/19/css3-flexible-box-layout-explained/">So much better</a>...</p>

<ul>
<li>Native grids</li>
</ul>


<p>Damn, <a href="http://www.w3.org/TR/css3-grid-layout/">this will be nice</a>.</p>

<ul>
<li>Web Animations &amp; the GPU</li>
</ul>


<p>When css keyframe animation first came out in webkit, I found it to be unusable from a performance point of view. Browsers have come far enough now that <a href="http://css-tricks.com/snippets/css/keyframe-animation-syntax/">it's reliable</a>.</p>

<ul>
<li>Filters, Shaders, Masking, Gradients, Shadows...</li>
</ul>


<p>So <a href="http://html5-demos.appspot.com/static/css/filters/index.html">many</a> <a href="http://www.adobe.com/devnet/html5/articles/css-shaders.html">cool</a> <a href="http://www.html5rocks.com/en/tutorials/masking/adobe/">things</a> you can do in css now.</p>

<ul>
<li>@supports</li>
</ul>


<p>Capabilities testing in css you say? <a href="http://davidwalsh.name/css-supports">Cool</a>.</p>

<h2>Networks &amp; Devices</h2>

<ul>
<li>Latency</li>
</ul>


<p>I'm all about custom builds for mobile networks (inline all the things). <a href="http://www.igvita.com/2012/07/19/latency-the-new-web-performance-bottleneck/">Latency is a killer in mobile</a>.</p>

<h2>Deployment, Build Processes, and Monitoring Services</h2>

<ul>
<li><a href="http://github.com">Github</a>, <a href="https://bitbucket.org/">bitbucket</a>, <a href="https://www.heroku.com/">heroku</a>, <a href="https://www.nodejitsu.com/">nodejitsu</a></li>
</ul>


<p>Don't tell me you still use SVN.</p>

<ul>
<li><a href="https://travis-ci.org/">Travis CI</a>, <a href="https://david-dm.org/">David</a> (he kinda looks creepy), <a href="http://gruntjs.com/">Grunt</a>, <a href="http://yeoman.io/">Yeoman</a>.</li>
</ul>


<p>You need to know all of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of Optimizing JavaScript for Responsive Design]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/04/25/the-importance-of-optimizing-javascript-for-responsive-design/"/>
    <updated>2012-04-25T13:17:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/04/25/the-importance-of-optimizing-javascript-for-responsive-design</id>
    <content type="html"><![CDATA[<p>So many responsive design solutions involve client-side detection, polyfills, data-attrs and event remapping. This all works fine, but as more and more sites begin to move toward a responsive design the importance of JavaScript optimization is more relevant than ever. More often than not, implementing a responsive design means more JavaScript and more logic. The Kb size debate for responsive sites is important, but often overlooked is the computational impact.</p>

<p>I’m not a micro-optimization troll (there’s plenty of that out there), but it’s shocking how some devices perform with the simple things we all take for granted. I would argue that for most devices, processing and latency are more important than Kb size.</p>

<p>So let’s take a look…</p>

<!-- more -->


<p>One of my favorite talks from JsConf 2012 was <a href="https://twitter.com/#!/jdalton">JDalton’s</a> “The Hidden Cost of Javascript Natives.” While admitting that some stuff was getting into unnecessary micro-optimization, he showed tests that  were quite interesting.</p>

<p>I thought I would look at some of these things from a mobile/RWD perspective. It’s important to remember that I’m not really looking at how the tests perform against each other, but how the devices perform against Chrome, Firefox and Safari. Often, there’s not going to be an appreciable difference for most things, but these tests illustrate that Mobile Safari isn’t going to process js as fast as Chrome 18 (no kidding, right).</p>

<h2><a href="http://jsperf.com/touch-events-exists">For..In loops</a> </h2>

<p>These are often called out as being hogs (the “for” loop still kills everything else), but they are necessary for doing capabilities tests.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/da63f2fc-d53c-4d27-96e9-285212f0adcb/00000065.png" alt="Alt text" /></p>

<p>It’s amazing how poorly some devices perform. I’m not saying that Modernzr is going to kill your Android 2.0 phone, but these things add up.</p>

<h2><a href="http://jsperf.com/jquery-data-vs-html-data-reading/3">Data Attributes</a></h2>

<p>The staple of any responsive images implementation performs horribly. Interesting that only the Safaris prefer the native dataset implementation.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/73c69e5f-6184-4ee6-ba25-0d8449b8fda5/00000064.png" alt="Alt text" /></p>

<p><a href="http://jsperf.com/data-vs-attr-data/4">Here’s another look at it</a>.</p>

<h2><a href="http://jsperf.com/prepend-append">jQuery Prepend/Append</a></h2>

<p>Optimization zealots' favorite pariah (<a href="http://jsperf.com/jquery-vs-native-appendchild">and rightfully so</a>), this is a biggie on mobile.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/509a5f42-73b7-4d48-a213-ebc33a712c63/00000066.png" alt="Alt text" /></p>

<p>2000 ops/sec is ghastly, but how many items are you appending really? In a client-side MVC, it could get into the hundreds. It's all cumulative after all...</p>

<h2><a href="http://jsperf.com/optimising-dom-access">DOM access</a></h2>

<p>Going to the DOM is always expensive and on mobile, it’s going to cost an arm and a leg.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/9409fc16-7f32-4f7c-ad10-33fa637703b2/00000067.png" alt="Alt text" /></p>

<p>This is a good example of optimizing code in general for performance.</p>

<h2>Chrome Timeline Panel</h2>

<p>A great <a href="http://gent.ilcore.com/2012/04/optimizing-with-timeline-panel.html">post</a> on debugging optimizations popped up recently and it’s definitely something to do on your sites now. Just know that whatever you see there in Chrome is probably amplified by a hundred on mobile devices.</p>

<h2>Conclusion</h2>

<p>Optimizing for performance is important regardless of the final client’s processing power, but it’s so much more important for a responsive design site. Piling on more and more JavaScript seems misguided and we should keep that in mind when trying to future-proof sites. I’d love to see how these tests stack up on other devices, so if you have web access on your toaster; please run them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Modules]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/04/19/responsive-modules/"/>
    <updated>2012-04-19T09:25:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/04/19/responsive-modules</id>
    <content type="html"><![CDATA[<p><strong>Update</strong>: Refactored to remove namespacing.</p>

<p>A lot has been said about Responsive Design lately. It’s primary a design movement, but the real problem it tries to solve is making content “<a href="http://www.slideshare.net/yiibu/reset-the-web">flow like water</a>.” To me it’s not about media queries, or 100% image widths, it’s about: one url, one codebase, and future-proofing new capabilities to maximize user experience.</p>

<p>Therefore, I give you: <strong>Responsive Modules</strong>.</p>

<!-- more -->


<p>Ok, I’m not reinventing anything; it’s just a way to leverage JavaScript’s prototypal inheritance, and future proof functionality through AMD dependency management.</p>

<p><strong>Backstory</strong>: I liked Classes in JavaScript before it was <a href="http://prototypejs.org/learn/class-inheritance">cool</a> (wait, was that ever cool?). I’m bummed to see them <a href="http://brendaneich.com/2011/10/jsconf-eu/">facing headwinds</a> in ES6. They aren’t totally necessary in JS, but it’s nice to have a super() and init() built in to your modules. <a href="http://www.dustindiaz.com/klass">There</a> <a href="http://jsclass.jcoglan.com/">are</a> <a href="http://coffeescript.org/#classes">many</a> <a href="http://ejohn.org/blog/simple-javascript-inheritance/">options</a>. My personal favorite is John Resig’s, since it’s the easiest sell ("hey, that jQuery guy made it!"). There's a github of this setup <a href="https://github.com/jreading/JsModuleBoilerplate">here</a> minus the responsive bit.</p>

<h2>Enough chatter, the code...</h2>

<p>Here's a carousel widget written in jQuery:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>carousel.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="nx">Class</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">Class</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Carousel</span> <span class="o">=</span> <span class="nx">Class</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//options here</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">element</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//instance vars live here</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">intPos</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">attachEvents</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">attachEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.arrow-next&#39;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">scrollNext</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.arrow-prev&#39;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">scrollPrev</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">scrollNext</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// calculate the intPos to move next here</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="s1">&#39;left&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">intPos</span><span class="p">});</span> <span class="c1">//css3 animation</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">scrollPrev</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//calculate the intPos to move previous here</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="s1">&#39;left&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">intPos</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">Carousel</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ok, so we have a little module that extends class, inits, bind itself to the 'this.element' data, attaches click events to arrows and scrolls the container. Cool...</p>

<p>But what about touch devices? We don't even have the arrows on the mobile layout. We want an invisible gesture, like a swipe.</p>

<p>So, we write another module for touch devices that includes the same methods for scrolling, but has a different 'attachEvents' method. But now we aren't being <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>. Or we can just add another method for swipe and conditionally call that, but now it's getting crufty...</p>

<p>AMD gives us a better way:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>carousel.touch.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;carousel&#39;</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">Carousel</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Carousel</span> <span class="o">=</span> <span class="nx">Carousel</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">attachEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">startPos</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">touches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">pageX</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;touchmove&#39;</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="nx">functione</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">endPos</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">changedTouches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">pageX</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">startPos</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">endPos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">scrollPrev</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">scrollNext</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">Carousel</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we are only replacing the parts we need, staying DRY, and leveraging the prototype chain. This makes more sense when there are more shared methods, but you get the gist.</p>

<h2>How's this work?</h2>

<p>AMD allows for dependency management. The touch version of the script is dependent on the base carousel file and extends itself. Because we aren't including the _super method in there, it's overriding the entire method, giving us a version with touch events.
Now it's just a matter of adding the right script for each device (this is where R+/RESS fits nicely).</p>

<p>One way to load this on the client would be:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>head   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Modernizr</span><span class="p">.</span><span class="nx">load</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">test</span><span class="o">:</span> <span class="nx">Modernizr</span><span class="p">.</span><span class="nx">touch</span><span class="p">,</span>
</span><span class='line'><span class="nx">yep</span><span class="o">:</span> <span class="s1">&#39;carousel.touch.js&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">nope</span><span class="o">:</span> <span class="s1">&#39;carousel.js&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Ways to improve</h2>

<p>We could leave the 'attachEvents' method empty and have versions for each capability (carousel.touch.js, carousel.click.js, carousel.speech.js) that way if we had client-side dependency management happening (via require.js or curl.js for example, though <a href="http://alexsexton.com/blog/2012/03/my-thoughts-on-amd/">I hear that's bad</a>) we wouldn't be carrying dead code around. We could also flip it around and have the touch events the default and make a carousel.click.js.</p>

<p>A better way would be to do AMD preprocessing and concatenate them all together (bonus points if your build script replaces the methods instead of just bundling the dependencies).</p>

<p>Regardless of execution, we are keeping the tenets of responsive design intact: keeping a common codebase, common url and future-proofing emerging capabilites without relying on loading more libraries or polyfills, or constraining the design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Very Important Matters]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/04/17/very-important-matters/"/>
    <updated>2012-04-17T17:07:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/04/17/very-important-matters</id>
    <content type="html"><![CDATA[<p>I was recently asked to put together a list of the most important issues in UI development on the web today and here's what I came up with:</p>

<!-- more -->


<pre><code>Modules: AMD, CommonJs &amp; ES.next Patterns &amp; Structure.
Responsive Design &amp; R+/RESS: Device Agnostic UI vs. Server Side Sniffing
Less, Sass &amp; Stylus: Why not?
HTML5 beyond the ‘section’ tag: AppCache, WebWorkers, LocalStorage, &amp; DnD
ES.next &amp; Harmony: the next JS
JavaScript MVC: when, where &amp; how?
Testing &amp; Development best practices: TDD vs. CI vs. throwing it at wall 
</code></pre>

<p>Let's dig in...</p>

<h2>Modules: AMD, CommonJs &amp; ES.next Patterns &amp; Structure.</h2>

<p>There was a recent dust-up about <a href="http://tomdale.net/2012/01/amd-is-not-the-answer/">AMD</a> <a href="http://alexsexton.com/blog/2012/03/my-thoughts-on-amd/">lately</a> and I was heartened to see (from my own annecdotal research at jsconf) that AMD is a good thing and pre-processing (or not preprocessing) isn't a dealbreaker. There are still a ton of use cases for client-side dependency management and the module pattern is a no-brainer, particularly in a CMS. AMD seems to be dominating now mainly due to require.js and Dojo. <a href="http://addyosmani.com/writing-modular-js/">Real modules in es harmony</a> will end the debate (not likely).</p>

<h2>Responsive Design &amp; R+/RESS: Device Agnostic UI vs. Server Side Sniffing</h2>

<p>What's responsive design? Never heard of it...</p>

<p>Ok, I don't live in a treehouse. This is obviously the next sliced bread in the web dev world and still in the early stages. There are <a href="http://www.vannavada.com/?p=35">problems</a> and ingenious solutions, so what does this all mean for the future. And how do we do our best from a technical perspective, but also from a user experience perspective. Apparently, there's <a href="http://www.useit.com/alertbox/mobile-vs-full-sites.html">still</a> <a href="http://www.netmagazine.com/opinions/nielsen-wrong-mobile">some</a> <a href="http://www.netmagazine.com/interviews/nielsen-responds-mobile-criticism">debate</a>. (Nielsen's MOSTLY wrong).</p>

<h2>Less, Sass &amp; Stylus: Why not?</h2>

<p>More interweb dustups lately, this time with <a href="https://github.com/cloudhead/less.js/issues/49#issuecomment-4628059">LESS.js</a>. I've been hearing alot of people sticking with SASS for this very reason (and the bigger issue of less.js looking like abandonware). I've also been hearing about Stylus, but to me, it looks a bit like a <a href="https://github.com/twitter/bootstrap/issues/3057">scrHipster motivational exercise</a>.</p>

<h2>HTML5 beyond the ‘section’ tag: AppCache, WebWorkers, LocalStorage, &amp; DnD</h2>

<p>Remy Sharp's jsConf talk was truly one of the best and the stuff he said just made sense. <a href="http://speakerdeck.com/u/rem/p/build-anything">Look for yourself</a>.</p>

<h2>ES.next &amp; Harmony: the next JS</h2>

<p>Brenden Eich is still the man. I'm not counting on Douglas Crockford's "CoffeeScript: The Good Parts" to hit bookstores soon, but looks like <a href="http://blip.tv/jsconf/jsconf2011-jeremy-ashkenas-5258082">ES Harmony will do it for us</a>. Don't be left behind. It'll be interesting to see native classes in js and all that <a href="http://edtsech.github.com/">sugar</a>.</p>

<h2>JavaScript MVC: when, where &amp; how?</h2>

<p>Backbone.js, 'nuff said; that's the how... The problem is sometimes people forget the "when and where?" Js MVC use case is narrower than people realize, but when done right it's a pretty little thing. And Ember? It falls into the same place as jQMobile does for me. Too much sacrifice given for rapid development.</p>

<h2>Testing &amp; Development best practices: TDD vs. CI vs. throwing it at the wall</h2>

<p>I admit I dont do enough testing. There I said it... I really do want to use <a href="https://github.com/cowboy/grunt">Grunt</a> though. And I was floored by the idea that <a href="https://github.com/fat">Jacob Thornton</a> put forward at jsConf about just releasing test suites and specs and letting the libraries write themselves. Kudos to anyone who does that on github first.</p>

<hr />

<p>This is the conference I'd like to see. What'd I forget?</p>
]]></content>
  </entry>
  
</feed>
