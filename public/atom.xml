<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HelloWurld]]></title>
  <link href="http://HelloWurld.heroku.com/atom.xml" rel="self"/>
  <link href="http://HelloWurld.heroku.com/"/>
  <updated>2012-05-15T11:28:34-04:00</updated>
  <id>http://HelloWurld.heroku.com/</id>
  <author>
    <name><![CDATA[J.Reading]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Another image proposal for responsive design]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/05/15/another-image-proposal-for-responsive-design/"/>
    <updated>2012-05-15T10:17:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/05/15/another-image-proposal-for-responsive-design</id>
    <content type="html"><![CDATA[<p>There are a few ideas floating around now to deal with images and media queries. There are
all <a href="http://www.w3.org/community/respimg/2012/05/13/an-alternative-proposition-to-and-srcset-with-wider-scope/">mostly</a> <a href="https://github.com/Wilto/respimg">inefficient</a> <a href="https://gist.github.com/2701939">ideas</a>, so I&#8217;m throwing my hat in the ring.</p>

<!-- more -->


<p>The <code>picture</code> element solution adds too much markup. The whatwg proposal is just ugly as heck and doesn&#8217;t leverage any existing valid attributes. The meta tag/mediaquery technique seems close, but I think that can be improved.</p>

<p>Let look at the <code>link</code> element:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span>
</span><span class='line'>  <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span>
</span><span class='line'>  <span class="na">href=</span><span class="s">&quot;smartphone.css&quot;</span>
</span><span class='line'>  <span class="na">media=</span><span class="s">&quot;screen and (max-device-width: 480px)&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What about other valid attributes we can add to that:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span>
</span><span class='line'>  <span class="na">rev=</span><span class="s">&quot;alternate&quot;</span>
</span><span class='line'>  <span class="na">href=</span><span class="s">&quot;#&quot;</span>
</span><span class='line'>  <span class="na">media=</span><span class="s">&quot;screen and (max-device-width: 480px)&quot;</span>
</span><span class='line'>  <span class="na">target=</span><span class="s">&quot;low&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The attribute <code>rev</code> associates a relationship away from that tag. It&#8217;s the opposite of <code>rel</code>, meaning; the document is an extension of this tag in the case of the <code>media</code> attribute passing.</p>

<p><code>target</code> is used now for <code>_top, _blank, _self, or FRAMENAME</code>. These properties are not best practices anymore, so let&#8217;s reuse them.</p>

<p>This technique uses existing valid attributes and sets the <code>target</code> attribute to &#8220;low&#8221;. This can be used in <code>img</code> elements as such:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;myimage.jpg&quot;</span> <span class="na">lowsrc=</span><span class="s">&quot;myimage-phone.jpg&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>lowsrc</code>, remember that? Why not <code>highsrc</code> or <code>tabletsrc</code> or <code>tvsrc</code>? It would be up to browsers to only pull the correct src based on the alternate link. Browsers look for hooks for alternate now. This also has the benefit or not dealing with paths, unless you need to.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;myimage.jpg&quot;</span> <span class="na">lowsrc=</span><span class="s">&quot;&quot;</span> <span class="na">tvsrc=</span><span class="s">&quot;tvimage.jpg&quot;</span> <span class="na">highsrc=</span><span class="s">&quot;http://cdn.bigimages.org/myimage.jpg&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a path in the href attribute, maybe we can do this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;link</span>
</span><span class='line'>  <span class="na">rev=</span><span class="s">&quot;alternate&quot;</span>
</span><span class='line'>  <span class="na">href=</span><span class="s">&quot;/phone-images/&quot;</span>
</span><span class='line'>  <span class="na">media=</span><span class="s">&quot;screen and (max-device-width: 480px)&quot;</span>
</span><span class='line'>  <span class="na">target=</span><span class="s">&quot;low&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;myimage.jpg&quot;</span> <span class="na">lowsrc=</span><span class="s">&quot;myimage.jpg&quot;</span><span class="nt">&gt;</span> // `lowsrc` resolves to &#39;/phone-images/myimage.jpg&#39;
</span></code></pre></td></tr></table></div></figure>


<p>I believe that this method gives the greatest control, smallest footprint, provides backward compatibillity and the smoothest path to adoption of any techniques that have made the rounds lately. Thoughts?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of Optimizing JavaScript for Responsive Design]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/04/25/the-importance-of-optimizing-javascript-for-responsive-design/"/>
    <updated>2012-04-25T13:17:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/04/25/the-importance-of-optimizing-javascript-for-responsive-design</id>
    <content type="html"><![CDATA[<p>So many responsive design solutions involve client-side detection, polyfills, data-attrs and event remapping. This all works fine, but as more and more sites begin to move toward a responsive design the importance of JavaScript optimization is more relevant than ever. More often than not, implementing a responsive design means more JavaScript and more logic. The Kb size debate for responsive sites is important, but often overlooked is the computational impact.</p>

<p>I’m not a micro-optimization troll (there’s plenty of that out there), but it’s shocking how some devices perform with the simple things we all take for granted. I would argue that for most devices, processing and latency are more important than Kb size.</p>

<p>So let’s take a look…</p>

<!-- more -->


<p>One of my favorite talks from JsConf 2012 was <a href="https://twitter.com/#!/jdalton">JDalton’s</a> “The Hidden Cost of Javascript Natives.” While admitting that some stuff was getting into unnecessary micro-optimization, he showed tests that  were quite interesting.</p>

<p>I thought I would look at some of these things from a mobile/RWD perspective. It’s important to remember that I’m not really looking at how the tests perform against each other, but how the devices perform against Chrome, Firefox and Safari. Often, there’s not going to be an appreciable difference for most things, but these tests illustrate that Mobile Safari isn’t going to process js as fast as Chrome 18 (no kidding, right).</p>

<h2><a href="http://jsperf.com/touch-events-exists">For..In loops</a> </h2>

<p>These are often called out as being hogs (the “for” loop still kills everything else), but they are necessary for doing capabilities tests.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/da63f2fc-d53c-4d27-96e9-285212f0adcb/00000065.png" alt="Alt text" /></p>

<p>It’s amazing how poorly some devices perform. I’m not saying that Modernzr is going to kill your Android 2.0 phone, but these things add up.</p>

<h2><a href="http://jsperf.com/jquery-data-vs-html-data-reading/3">Data Attributes</a></h2>

<p>The staple of any responsive images implementation performs horribly. Interesting that only the Safaris prefer the native dataset implementation.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/73c69e5f-6184-4ee6-ba25-0d8449b8fda5/00000064.png" alt="Alt text" /></p>

<p><a href="http://jsperf.com/data-vs-attr-data/4">Here’s another look at it</a>.</p>

<h2><a href="http://jsperf.com/prepend-append">jQuery Prepend/Append</a></h2>

<p>Optimization zealots&#8217; favorite pariah (<a href="http://jsperf.com/jquery-vs-native-appendchild">and rightfully so</a>), this is a biggie on mobile.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/509a5f42-73b7-4d48-a213-ebc33a712c63/00000066.png" alt="Alt text" /></p>

<p>2000 ops/sec is ghastly, but how many items are you appending really? In a client-side MVC, it could get into the hundreds. It&#8217;s all cumulative after all&#8230;</p>

<h2><a href="http://jsperf.com/optimising-dom-access">DOM access</a></h2>

<p>Going to the DOM is always expensive and on mobile, it’s going to cost an arm and a leg.</p>

<p><img src="http://content.screencast.com/users/JReading/folders/Jing/media/9409fc16-7f32-4f7c-ad10-33fa637703b2/00000067.png" alt="Alt text" /></p>

<p>This is a good example of optimizing code in general for performance.</p>

<h2>Chrome Timeline Panel</h2>

<p>A great <a href="http://gent.ilcore.com/2012/04/optimizing-with-timeline-panel.html">post</a> on debugging optimizations popped up recently and it’s definitely something to do on your sites now. Just know that whatever you see there in Chrome is probably amplified by a hundred on mobile devices.</p>

<h2>Conclusion</h2>

<p>Optimizing for performance is important regardless of the final client’s processing power, but it’s so much more important for a responsive design site. Piling on more and more JavaScript seems misguided and we should keep that in mind when trying to future-proof sites. I’d love to see how these tests stack up on other devices, so if you have web access on your toaster; please run them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS Classes ain't dead yet]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/04/23/js-classes-aint-dead-yet/"/>
    <updated>2012-04-23T12:59:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/04/23/js-classes-aint-dead-yet</id>
    <content type="html"><![CDATA[<p>Interesting stuff coming out about js Classes in Alex Russell&#8217;s <a href="http://infrequently.org/2012/04/class-warfare/">blog post</a>.</p>

<p>I&#8217;m a of <a href="http://hellowurld.heroku.com/blog/2012/04/19/responsive-modules/">fan</a> of <a href="https://github.com/jreading/JsModuleBoilerplate">classes</a> for some things in js (modular widgets, mostly). So I hope this fight is not over. Max/Min is all I really want anyway.</p>

<p>Here&#8217;s a great response by <a href="https://plus.google.com/u/1/116910304844117268718/posts/WRWBXpi5e2f">Malte Ubl</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Modules]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/04/19/responsive-modules/"/>
    <updated>2012-04-19T09:25:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/04/19/responsive-modules</id>
    <content type="html"><![CDATA[<p><strong>Update</strong>: Refactored to remove namespacing.</p>

<p>A lot has been said about Responsive Design lately. It’s primary a design movement, but the real problem it tries to solve is making content “<a href="http://www.slideshare.net/yiibu/reset-the-web">flow like water</a>.” To me it’s not about media queries, or 100% image widths, it’s about: one url, one codebase, and future-proofing new capabilities to maximize user experience.</p>

<p>Therefore, I give you: <strong>Responsive Modules</strong>.</p>

<!-- more -->


<p>Ok, I’m not reinventing anything; it’s just a way to leverage JavaScript’s prototypal inheritance, and future proof functionality through AMD dependency management.</p>

<p><strong>Backstory</strong>: I liked Classes in JavaScript before it was <a href="http://prototypejs.org/learn/class-inheritance">cool</a> (wait, was that ever cool?). I’m bummed to see them <a href="http://brendaneich.com/2011/10/jsconf-eu/">facing headwinds</a> in ES6. They aren’t totally necessary in JS, but it’s nice to have a super() and init() built in to your modules. <a href="http://www.dustindiaz.com/klass">There</a> <a href="http://jsclass.jcoglan.com/">are</a> <a href="http://coffeescript.org/#classes">many</a> <a href="http://ejohn.org/blog/simple-javascript-inheritance/">options</a>. My personal favorite is John Resig’s, since it’s the easiest sell (&#8220;hey, that jQuery guy made it!&#8221;). There&#8217;s a github of this setup <a href="https://github.com/jreading/JsModuleBoilerplate">here</a> minus the responsive bit.</p>

<h2>Enough chatter, the code&#8230;</h2>

<p>Here&#8217;s a carousel widget written in jQuery:</p>

<figure class='code'><figcaption><span>carousel.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="nx">Class</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">Class</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Carousel</span> <span class="o">=</span> <span class="nx">Class</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//options here</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">element</span><span class="p">);</span>
</span><span class='line'>          <span class="c1">//instance vars live here</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">intPos</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">attachEvents</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">attachEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.arrow-next&#39;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">scrollNext</span><span class="p">();</span>
</span><span class='line'>          <span class="p">},</span><span class="k">this</span><span class="p">));</span>  
</span><span class='line'>          
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.arrow-prev&#39;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">scrollPrev</span><span class="p">();</span>
</span><span class='line'>          <span class="p">},</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">scrollNext</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// calculate the intPos to move next here</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="s1">&#39;left&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">intPos</span><span class="p">});</span> <span class="c1">//css3 animation</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">scrollPrev</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//calculate the intPos to move previous here</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="s1">&#39;left&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">intPos</span><span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Carousel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so we have a little module that extends class, inits, bind itself to the &#8216;this.element&#8217; data, attaches click events to arrows and scrolls the container. Cool&#8230;</p>

<p>But what about touch devices? We don&#8217;t even have the arrows on the mobile layout. We want an invisible gesture, like a swipe.</p>

<p>So, we write another module for touch devices that includes the same methods for scrolling, but has a different &#8216;attachEvents&#8217; method. But now we aren&#8217;t being <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>. Or we can just add another method for swipe and conditionally call that, but now it&#8217;s getting crufty&#8230;</p>

<p>AMD gives us a better way:</p>

<figure class='code'><figcaption><span>carousel.touch.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;carousel&#39;</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">Carousel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Carousel</span> <span class="o">=</span> <span class="nx">Carousel</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">attachEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">startPos</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">touches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">pageX</span><span class="p">;</span>
</span><span class='line'>          <span class="p">},</span><span class="k">this</span><span class="p">));</span>  
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;touchmove&#39;</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="nx">functione</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">endPos</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">changedTouches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">pageX</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">startPos</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">endPos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="p">.</span><span class="nx">scrollPrev</span><span class="p">();</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="p">.</span><span class="nx">scrollNext</span><span class="p">();</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">},</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Carousel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we are only replacing the parts we need, staying DRY, and leveraging the prototype chain. This makes more sense when there are more shared methods, but you get the gist.</p>

<h2>How&#8217;s this work?</h2>

<p>AMD allows for dependency management. The touch version of the script is dependent on the base carousel file and extends itself. Because we aren&#8217;t including the _super method in there, it&#8217;s overriding the entire method, giving us a version with touch events.
Now it&#8217;s just a matter of adding the right script for each device (this is where R+/RESS fits nicely).</p>

<p>One way to load this on the client would be:</p>

<figure class='code'><figcaption><span>head   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Modernizr</span><span class="p">.</span><span class="nx">load</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">test</span><span class="o">:</span> <span class="nx">Modernizr</span><span class="p">.</span><span class="nx">touch</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">yep</span><span class="o">:</span> <span class="s1">&#39;carousel.touch.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">nope</span><span class="o">:</span> <span class="s1">&#39;carousel.js&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ways to improve</h2>

<p>We could leave the &#8216;attachEvents&#8217; method empty and have versions for each capability (carousel.touch.js, carousel.click.js, carousel.speech.js) that way if we had client-side dependency management happening (via require.js or curl.js for example, though <a href="http://alexsexton.com/blog/2012/03/my-thoughts-on-amd/">I hear that&#8217;s bad</a>) we wouldn&#8217;t be carrying dead code around. We could also flip it around and have the touch events the default and make a carousel.click.js.</p>

<p>A better way would be to do AMD preprocessing and concatenate them all together (bonus points if your build script replaces the methods instead of just bundling the dependencies).</p>

<p>Regardless of execution, we are keeping the tenets of responsive design intact: keeping a common codebase, common url and future-proofing emerging capabilites without relying on loading more libraries or polyfills, or constraining the design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Very Important Matters]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/04/17/very-important-matters/"/>
    <updated>2012-04-17T17:07:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/04/17/very-important-matters</id>
    <content type="html"><![CDATA[<p>I was recently asked to put together a list of the most important issues in UI development on the web today and here&#8217;s what I came up with:</p>

<!-- more -->


<pre><code>Modules: AMD, CommonJs &amp; ES.next Patterns &amp; Structure.
Responsive Design &amp; R+/RESS: Device Agnostic UI vs. Server Side Sniffing
Less, Sass &amp; Stylus: Why not?
HTML5 beyond the ‘section’ tag: AppCache, WebWorkers, LocalStorage, &amp; DnD
ES.next &amp; Harmony: the next JS
JavaScript MVC: when, where &amp; how?
Testing &amp; Development best practices: TDD vs. CI vs. throwing it at wall 
</code></pre>

<p>Let&#8217;s dig in&#8230;</p>

<h2>Modules: AMD, CommonJs &amp; ES.next Patterns &amp; Structure.</h2>

<p>There was a recent dust-up about <a href="http://tomdale.net/2012/01/amd-is-not-the-answer/">AMD</a> <a href="http://alexsexton.com/blog/2012/03/my-thoughts-on-amd/">lately</a> and I was heartened to see (from my own annecdotal research at jsconf) that AMD is a good thing and pre-processing (or not preprocessing) isn&#8217;t a dealbreaker. There are still a ton of use cases for client-side dependency management and the module pattern is a no-brainer, particularly in a CMS. AMD seems to be dominating now mainly due to require.js and Dojo. <a href="http://addyosmani.com/writing-modular-js/">Real modules in es harmony</a> will end the debate (not likely).</p>

<h2>Responsive Design &amp; R+/RESS: Device Agnostic UI vs. Server Side Sniffing</h2>

<p>What&#8217;s responsive design? Never heard of it&#8230;</p>

<p>Ok, I don&#8217;t live in a treehouse. This is obviously the next sliced bread in the web dev world and still in the early stages. There are <a href="http://www.vannavada.com/?p=35">problems</a> and ingenious solutions, so what does this all mean for the future. And how do we do our best from a technical perspective, but also from a user experience perspective. Apparently, there&#8217;s <a href="http://www.useit.com/alertbox/mobile-vs-full-sites.html">still</a> <a href="http://www.netmagazine.com/opinions/nielsen-wrong-mobile">some</a> <a href="http://www.netmagazine.com/interviews/nielsen-responds-mobile-criticism">debate</a>. (Nielsen&#8217;s MOSTLY wrong).</p>

<h2>Less, Sass &amp; Stylus: Why not?</h2>

<p>More interweb dustups lately, this time with <a href="https://github.com/cloudhead/less.js/issues/49#issuecomment-4628059">LESS.js</a>. I&#8217;ve been hearing alot of people sticking with SASS for this very reason (and the bigger issue of less.js looking like abandonware). I&#8217;ve also been hearing about Stylus, but to me, it looks a bit like a <a href="https://github.com/twitter/bootstrap/issues/3057">scrHipster motivational exercise</a>.</p>

<h2>HTML5 beyond the ‘section’ tag: AppCache, WebWorkers, LocalStorage, &amp; DnD</h2>

<p>Remy Sharp&#8217;s jsConf talk was truly one of the best and the stuff he said just made sense. <a href="http://speakerdeck.com/u/rem/p/build-anything">Look for yourself</a>.</p>

<h2>ES.next &amp; Harmony: the next JS</h2>

<p>Brenden Eich is still the man. I&#8217;m not counting on Douglas Crockford&#8217;s &#8220;CoffeeScript: The Good Parts&#8221; to hit bookstores soon, but looks like <a href="http://blip.tv/jsconf/jsconf2011-jeremy-ashkenas-5258082">ES Harmony will do it for us</a>. Don&#8217;t be left behind. It&#8217;ll be interesting to see native classes in js and all that <a href="http://edtsech.github.com/">sugar</a>.</p>

<h2>JavaScript MVC: when, where &amp; how?</h2>

<p>Backbone.js, &#8216;nuff said; that&#8217;s the how&#8230; The problem is sometimes people forget the &#8220;when and where?&#8221; Js MVC use case is narrower than people realize, but when done right it&#8217;s a pretty little thing. And Ember? It falls into the same place as jQMobile does for me. Too much sacrifice given for rapid development.</p>

<h2>Testing &amp; Development best practices: TDD vs. CI vs. throwing it at the wall</h2>

<p>I admit I dont do enough testing. There I said it&#8230; I really do want to use <a href="https://github.com/cowboy/grunt">Grunt</a> though. And I was floored by the idea that <a href="https://github.com/fat">Jacob Thornton</a> put forward at jsConf about just releasing test suites and specs and letting the libraries write themselves. Kudos to anyone who does that on github first.</p>

<hr />

<p>This is the conference I&#8217;d like to see. What&#8217;d I forget?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desktop First: A Reverse Do-Nothing, Responsive Anti-Pattern]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/03/22/desktop-first-a-reverse-do-nothing-responsive-anti-pattern/"/>
    <updated>2012-03-22T09:33:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/03/22/desktop-first-a-reverse-do-nothing-responsive-anti-pattern</id>
    <content type="html"><![CDATA[<p>Well now that I got your attention&#8230;</p>

<p>When looking for a good strategy for implementing a responsive design, web devs are bombarded with tons of techniques, libraries, polyfills, and workarounds. Most of the time, we don&#8217;t need them. <!--more--></p>

<p>The &#8220;mobile-first&#8221; approach towards building a site can necessitate the use of polyfills for legacy desktop browsers or just <a href="http://starbucks.com">an awful looking desktop experience</a>.</p>

<p>Looking at <a href="http://coding.smashingmagazine.com/2011/08/10/techniques-for-gracefully-degrading-media-queries/#comment-545128">this comment from a smashing mag post on responsive techniques</a>, this seems like the simpliest approach considering there&#8217;s no need to worry about fallbacks, polyfills, and other workarounds. Why do we have respond.js, Modernzr.mq, jQueryMobile CSS hacks and the like&#8230;?</p>

<figure class='code'><figcaption><span>desktop-first.css  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#main</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">960px</span><span class="p">;</span> <span class="c">/*oh so fixed width*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">header</span> <span class="nt">nav</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">400px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nf">#main</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>      <span class="k">max-width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">header</span> <span class="nt">nav</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Combine a few (read: keep it simple) of these with <a href="http://www.leemunroe.com/ie-rounded-corners-css3/">aggressive</a> <a href="https://twitter.com/#!/zeldman/statuses/170930936718950400">enhancement</a>, and a few <a href="http://www.leemunroe.com/adaptive-responsive/">fully responsive techniques</a> and it seems like everything else is just cruft.</p>

<p>What if you want to have access to that media query capability in your js? Well, then <a href="http://www.nczonline.net/blog/2012/01/03/css-media-queries-in-javascript-part-1/">you&#8217;re doing it wrong</a>. Styles shouldn&#8217;t ever be bound to so tightly to your app or widget, or even content for that matter.</p>

<p>Large images in CSS? Don&#8217;t do it. Use fluid images or data-attrs to lazy load the right size from the markup.</p>

<p>One last thing, if we take the trending approach <a href="http://coding.smashingmagazine.com/2012/03/22/device-agnostic-approach-to-responsive-web-design/">such as this by Thierry Koblentz (who&#8217;s a genuine hero)</a> of &#8220;device agnostic,&#8221; there&#8217;s still a presumption that it&#8217;s oldIE or media-query capable. Not a totally unsafe assumption, but when we talk about the &#8220;internet of things,&#8221; who knows&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[first post]]></title>
    <link href="http://HelloWurld.heroku.com/blog/2012/03/19/first-post/"/>
    <updated>2012-03-19T14:59:00-04:00</updated>
    <id>http://HelloWurld.heroku.com/blog/2012/03/19/first-post</id>
    <content type="html"><![CDATA[<p>Well, let&#8217;s give this a go&#8230;</p>
]]></content>
  </entry>
  
</feed>
